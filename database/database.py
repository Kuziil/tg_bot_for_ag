import logging

from config_data.config import Config, load_config
from lexicon.lexicon_ru import LEXICON_BUTTON_RU

logger = logging.getLogger(__name__)


class DBManager:
    def __init__(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é config
        self.config: Config = load_config()

        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.user_database: dict[int, dict[str, str | list[str]]] = {}

        self.shifts: dict[str, int] = {}

    # –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ
    def is_user_in_system(self, user_id: int) -> bool:
        return True if user_id in self.user_database else False

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    def add_user(self,
                 user_id: int,
                 username: str,
                 emoticon: str) -> None:
        if self.is_user_in_system(user_id=user_id):
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            self.user_database[user_id] = {'username': username,
                                           'emoticon': emoticon,
                                           'shifts': []}
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –¥–æ–±–∞–≤–ª–µ–Ω —Å ID {user_id}")

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–ª—é—á–µ–π
    async def add_empty_key(self, user_id: int) -> None:
        self.user_database[user_id].update({
            'shifts': list()
        })

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    def add_shift(self,
                  user_id: int,
                  day_call_back_t: str) -> str | None:
        if self.is_user_in_system(user_id=user_id):
            if day_call_back_t not in self.shifts:
                user = self.user_database[user_id]
                self.shifts[day_call_back_t] = user_id
                user['shifts'].append(day_call_back_t)
                return user['emoticon']
            else:
                user_id = self.shifts[day_call_back_t]
                return self.user_database[user_id]['emoticon']
        else:
            return LEXICON_BUTTON_RU['user_not_in_system']

    def get_emot_by_day_call_back(self, shift) -> str:
        return self.user_database[self.shifts[shift]]['emoticon']


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞
db = DBManager()

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ –∫–ª–∞—Å—Å–∞
# db.add_user(
#     user_id=db.config.tg_bot.admin_ids[0],
#     username="Mic",
#     emoticon="üòè")

db.add_user(
    user_id=db.config.tg_bot.operator_ids[0],
    username="Dac",
    emoticon="ü§î")
